INPUT :

#include <iostream>
#include <cstdlib>
using namespace std;

int cost[10][10] = {0}, i, j, k, n;
int qu[10], front = 0, rear = 0, visit[10] = {0}, visited[10] = {0};
int stk[10], top = -1, visit1[10] = {0}, visited1[10] = {0};

void BFS(int v) {
    cout << "BFS Traversal: ";
    cout << v << " ";
    visited[v] = 1;
    qu[rear++] = v;

    while (front < rear) {
        v = qu[front++];
        for (j = 0; j < n; j++) {
            if (cost[v][j] == 1 && !visited[j]) {
                cout << j << " ";
                visited[j] = 1;
                qu[rear++] = j;
            }
        }
    }
    cout << endl;
}

void DFS(int v) {
    cout << "DFS Traversal: ";
    cout << v << " ";
    visited1[v] = 1;
    stk[++top] = v;

    while (top >= 0) {
        v = stk[top--];
        for (j = n - 1; j >= 0; j--) {
            if (cost[v][j] == 1 && !visited1[j]) {
                cout << j << " ";
                visited1[j] = 1;
                stk[++top] = j;
            }
        }
    }
    cout << endl;
}
int main() {
    int m, v;
    cout << "Enter number of vertices: ";
    cin >> n;
    cout << "Enter number of edges: ";
    cin >> m;

    cout << "\nEnter edges (start end):\n";
    for (k = 0; k < m; k++) {
        cin >> i >> j;
        cost[i][j] = 1;
        cost[j][i] = 1;
    }
    cout << "The adjacency matrix of the graph is:\n";
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            cout << cost[i][j] << " ";
        }
        cout << endl;
    }
    cout << "Enter initial vertex for BFS: ";
    cin >> v;
    BFS(v);
    cout << "Enter initial vertex for DFS: ";
    cin >> v;
    DFS(v);
    return 0;
}



OUTPUT :



Enter number of vertices: 5
Enter number of edges: 6

Enter edges (start end):
0 1
1 2
2 3
3 4
0 2
1 4
The adjacency matrix of the graph is:
0 1 1 0 0 
1 0 1 0 1 
1 1 0 1 0 
0 0 1 0 1 
0 1 0 1 0 
Enter initial vertex for BFS: 3 4
BFS Traversal: 3 2 4 0 1 
Enter initial vertex for DFS: DFS Traversal: 4 3 1 2 0



INPUT :

#include <iostream>
#include <cstdlib>
using namespace std;

#define MAX 10
#define TRUE 1
#define FALSE 0

class lgra {
private:
    struct node1 {
        int vertex;
        struct node1* next;
    };
    node1* head[MAX];
    int visited[MAX];

public:
    lgra();
    void create();
    void dfs(int);
};

lgra::lgra() {
    for (int v1 = 0; v1 < MAX; v1++) {
        visited[v1] = FALSE;
        head[v1] = NULL;
    }
}

void lgra::create() {
    int v1, v2;
    char ans;
    node1* N, * first;

    cout << "Enter the vertices no. beginning with 0";
    do {
        cout << "\nEnter the Edge of a graph (e.g., 0 1): ";
        cin >> v1 >> v2;

        if (v1 >= MAX || v2 >= MAX) {
            cout << "Invalid Vertex Value\n";
        }
        else {
            // Create first node
            N = new node1;
            if (N == NULL) {
                cout << "Insufficient Memory\n";
                return;
            }
            N->vertex = v2;
            N->next = NULL;
            if (head[v1] == NULL)
                head[v1] = N;
            else {
                first = head[v1];
                while (first->next != NULL)
                    first = first->next;
                first->next = N;
            }

            // Create second node (for undirected graph)
            N = new node1;
            if (N == NULL) {
                cout << "Insufficient Memory\n";
                return;
            }
            N->vertex = v1;
            N->next = NULL;
            if (head[v2] == NULL)
                head[v2] = N;
            else {
                first = head[v2];
                while (first->next != NULL)
                    first = first->next;
                first->next = N;
            }
        }

        cout << "\nWant to add more edges? (y/n): ";
        cin >> ans;
    } while (ans == 'y');
}

void lgra::dfs(int v1) {
    node1* first;
    cout << v1 << " ";
    visited[v1] = TRUE;
    first = head[v1];

    while (first != NULL) {
        if (visited[first->vertex] == FALSE)
            dfs(first->vertex);
        first = first->next; // Move to next node
    }
}

int main() {
    int v1;
    lgra g;
    g.create();

    cout << "\nEnter the vertex from where you want to traverse: ";
    cin >> v1;

    if (v1 >= MAX)
        cout << "Invalid Vertex\n";
    else {
        cout << "The DFS of the graph: ";
        g.dfs(v1);
    }

    return 0;
}

OUTPUT :


Enter the vertices no. beginning with 0
Enter the Edge of a graph (e.g., 0 1): 1 2

Want to add more edges? (y/n): y

Enter the Edge of a graph (e.g., 0 1): 2 3

Want to add more edges? (y/n): y

Enter the Edge of a graph (e.g., 0 1): 3 4

Want to add more edges? (y/n): y

Enter the Edge of a graph (e.g., 0 1): 0 2

Want to add more edges? (y/n): n

Enter the vertex from where you want to traverse: 1 2
The DFS of the graph: 1 2 3 4 0 

=== Code Execution Successful ===

